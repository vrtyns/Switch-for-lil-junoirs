    READ ME
==================================================================

สิ่งที่มีอยู่ภายใน doc นี้จะเป็นโค้ดที่สามารถ compile ขึ้น Arduino IDE (หากใครยังไม่มีให้ทำการโหลดเอาไว้ แล้วสามารถมาเซ็ตหน้างานได้ที่พี่ฟี่เลย สามารถเอาตัวแทน 1 คนมาเป็นเครื่องเซ็ทได้ แนะนำเป็น window เพื่อความรวดเร็ว ส่วนสำหรับคนที่สนใจอยากเซ็ต IDE สำหรับ IOT ก็สามารถพกแลปทอปกันมาเผื่อ ๆ ได้เลยนะคะ)
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
________________________
 Board & port information
||  LOLIN WEMOS D1 R1   ||
||  port driver CH340   ||
________________________

แบ่งเป็น 2 ส่วน :
1. โค้ดที่รันแบบ Auto โดยที่ไม่มีหน้าเว็บไซต์เข้ามาเกี่ยวข้อง
 |- ในกรณีนี้สามารถเปลี่ยนมารันได้ตอนว่าง ๆ หรืออยากโชว์ไฟเล่น ๆ
2. โค้ดทีรันแล้วมี Local IP ขึ้นมาเพื่อเข้าหน้าเว็บไซต์โดยง่าย
|- เมื่อรันอันนี้แล้วต้องมีการเปิด serial monitor เพื่อหา Local IP แล้วนำลิงค์เว็บไปใช้งานได้เลย (อันนี้พี่ทำแค่เว็บอย่างง่ายไว้ให้แบบที่ไม่ได้แต่ง UX/UI เลยนะคะ)

***ข้อควรระวัง***
- คอยเช็คสภาพหลอดไฟ เพราะการเปิดไปนาน ๆ จะทำให้มันร้อนได้ วิธีแก้คือการปิดมันไปก่อน
- ตอนปิดกล่องพยายามอย่าปิดแบบทับสาย เดี๋ยวสายหัก
- หลอดไฟบางตัวอาจไม่ติด เป็นเรื่องปกติ
- อย่าอัพโหลดโค้ดขึ้น IDE ถี่ ๆ เพราะอาจทำให้บอร์ดพังได้ ก่อน compile สามารถถามที่พี่ฟี่ได้เลยถ้าหากไม่มั่นใจ

==================================================================
สิ่งที่สามารถเล่นได้เบื้องต้น ฉบับโค้ด :
   |- const unsigned long interval (เป็นการระบุเวลา 3000 = 3 วินาที *ไม่ควรเซ็ตให้อยู่หลักร้อยเพราะมันจะมีค่า 0.1 วินาทีแล้วอาจทำให้บู้ม*)
 |- การเลือกใช้งานขา Digital หรือ D[0] (จำพวก D2 ไปจนถึง D9 อันไหนที่เห็นว่าหลอดไฟไม่ติดก็สามารถลบออกได้เลยตามสบาย หรือจะเก็บไว้ก็ได้เพราะไม่มีปัญหาอะไร)
==================================================================
____________________________
|                          |
|     ไฟวิ่ง auto แบบไปกลับเอง        |
|__________________________|

const int relayPins[] = {D2, D3, D4, D5, D6, D7, D8, D9};
const int numRelays = sizeof(relayPins) / sizeof(relayPins[0]);

int currentRelay = 0;
int direction = 1;

unsigned long lastStepTime = 0;
const unsigned long interval = 3000;

void setup() {
  for (int i = 0; i < numRelays; i++) {
    pinMode(relayPins[i], OUTPUT);
    digitalWrite(relayPins[i], HIGH); 
  }
}

void loop() {
  unsigned long currentTime = millis();
  if (currentTime - lastStepTime >= interval) {
    for (int i = 0; i < numRelays; i++) {
      digitalWrite(relayPins[i], HIGH);
    }

    digitalWrite(relayPins[currentRelay], LOW); 
    currentRelay += direction;

    if (currentRelay >= numRelays) {
      currentRelay = numRelays - 2;
      direction = -1;
    } else if (currentRelay < 0) {
      currentRelay = 1;
      direction = 1;
    }

    lastStepTime = currentTime;
  }
}

____________________________
|                          |
|  ไฟวิ่ง auto แบบสลับเปิดทีละ 2     |
|__________________________|

const int relayPins[] = {D2, D3, D4, D5, D6, D7, D8, D9};
const int numRelays = sizeof(relayPins) / sizeof(relayPins[0]);

int currentRelay = 0;
int direction = 1;

unsigned long lastStepTime = 0;
const unsigned long interval = 3000;

void setup() {
  for (int i = 0; i < numRelays; i++) {
    pinMode(relayPins[i], OUTPUT);
    digitalWrite(relayPins[i], HIGH);
  }
}

void loop() {
  unsigned long currentTime = millis();
  if (currentTime - lastStepTime >= interval) {
    for (int i = 0; i < numRelays; i++) {
      digitalWrite(relayPins[i], HIGH);
    }

    if (currentRelay < numRelays - 1) {
      digitalWrite(relayPins[currentRelay], LOW);
      digitalWrite(relayPins[currentRelay + 1], LOW);
    }

    currentRelay += 2 * direction;

    if (currentRelay >= numRelays - 1) {
      currentRelay = numRelays - 3;
      direction = -1;
    } else if (currentRelay < 0) {
      currentRelay = 1;
      direction = 1;
    }

    lastStepTime = currentTime;
  }
}
____________________________
|                          |  Q: อันนี้ทำอะไรได้บ้าง??
|        เปิดปิดผ่านหน้าเว็บไซต์           |       A: มี 3 โหมด
|__________________________|     1.Manual 2.Auto 1 by 1 3.Auto 2 at once 

#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>

const char* ssid = "***-***";
const char* password = "**********"; //ไว้พี่มาเข้ารหัสให้นะคะ

ESP8266WebServer server(80);

const int relayPins[] = {D2, D3, D4, D5, D6, D7, D8, D9};
const int numRelays = sizeof(relayPins) / sizeof(relayPins[0]);

bool relayState[numRelays] = {false};

enum ModeType { MANUAL, AUTO_ONE, AUTO_TWO };
ModeType currentMode = MANUAL;

unsigned long lastStepTime = 0;
const unsigned long interval = 3000;

int currentIndex = 0;
int direction = 1;

void setup() {
  Serial.begin(115200);
  for (int i = 0; i < numRelays; i++) {
    pinMode(relayPins[i], OUTPUT);
    digitalWrite(relayPins[i], HIGH);  // OFF (Active LOW)
  }

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
  }

  Serial.println();
  Serial.print("Local IP: http://");
  Serial.println(WiFi.localIP());

  server.on("/", handleRoot);
  server.on("/toggle", handleToggle);
  server.on("/mode", handleModeChange);
  server.begin();
}

void loop() {
  server.handleClient();

  if (currentMode == AUTO_ONE || currentMode == AUTO_TWO) {
    unsigned long currentTime = millis();
    if (currentTime - lastStepTime >= interval) {
      for (int i = 0; i < numRelays; i++) {
        digitalWrite(relayPins[i], HIGH);
        relayState[i] = false;
      }

      if (currentMode == AUTO_ONE) {
        digitalWrite(relayPins[currentIndex], LOW);
        relayState[currentIndex] = true;
      } else if (currentMode == AUTO_TWO) {
        if (currentIndex < numRelays - 1) {
          digitalWrite(relayPins[currentIndex], LOW);
          digitalWrite(relayPins[currentIndex + 1], LOW);
          relayState[currentIndex] = true;
          relayState[currentIndex + 1] = true;
        }
      }

      if (currentMode == AUTO_ONE) {
        currentIndex += direction;
        if (currentIndex >= numRelays) {
          currentIndex = numRelays - 2;
          direction = -1;
        } else if (currentIndex < 0) {
          currentIndex = 1;
          direction = 1;
        }
      } else if (currentMode == AUTO_TWO) {
        currentIndex += 2 * direction;
        if (currentIndex >= numRelays - 1) {
          currentIndex = numRelays - 3;
          direction = -1;
        } else if (currentIndex < 0) {
          currentIndex = 1;
          direction = 1;
        }
      }

      lastStepTime = currentTime;
    }
  }
}

void handleRoot() {
  String html = "<!DOCTYPE html><html><head><meta name='viewport' content='width=device-width, initial-scale=1'>";
  html += "<style>button{padding:10px 20px;margin:5px;font-size:16px;} body{font-family:sans-serif;}</style>";
  html += "<h2>สวิทช์เปิดปิดพร้อมแบ่งโหมด</h2>";

  html += "<p><b>Current Mode: </b>";
  if (currentMode == MANUAL) html += "Manual</p>";
  else if (currentMode == AUTO_ONE) html += "Auto - One by One</p>";
  else html += "Auto - Two at a Time</p>";

  html += "<p><b>Change Mode:</b><br>";
  html += "<a href='/mode?m=0'><button>Manual</button></a>";
  html += "<a href='/mode?m=1'><button>Auto - 1 by 1</button></a>";
  html += "<a href='/mode?m=2'><button>Auto - 2 at once</button></a></p>";

  if (currentMode == MANUAL) {
    html += "<h3>เปิดปิด Manual</h3>";
    for (int i = 0; i < numRelays; i++) {
       html += "Switch " + String(i + 1) + ": ";
      html += "<a href='/toggle?relay=" + String(i) + "'><button>";
      html += (relayState[i] ? "ON" : "OFF");
      html += "</button></a><br>";
    }
  } else {
    html += "<p>ปล่อยรันจอย ๆ จร้</p>";
  }

  html += "</html>";
  server.send(200, "text/html", html);
}

void handleToggle() {
  if (currentMode != MANUAL) {
    server.sendHeader("Location", "/");
    server.send(303);
    return;
  }

  if (server.hasArg("relay")) {
    int index = server.arg("relay").toInt();
    if (index >= 0 && index < numRelays) {
      relayState[index] = !relayState[index];
      digitalWrite(relayPins[index], relayState[index] ? LOW : HIGH);
    }
  }
  server.sendHeader("Location", "/");
  server.send(303);
}

void handleModeChange() {
  if (server.hasArg("m")) {
    int modeVal = server.arg("m").toInt();
    if (modeVal >= 0 && modeVal <= 2) {
      currentMode = (ModeType)modeVal;

      currentIndex = 0;
      direction = 1;
      lastStepTime = millis();

      for (int i = 0; i < numRelays; i++) {
        digitalWrite(relayPins[i], HIGH);
        relayState[i] = false;
      }
    }
  }
  server.sendHeader("Location", "/");
  server.send(303);
}

